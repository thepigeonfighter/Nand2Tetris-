// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
       
    static Array array;
    static Array heap;
    static int freeList;
    /** Initializes the class. */
    function void init() {
        let array = 0;
        let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        let freeList = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return array[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let array[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int address;
        var int newAddress;
        var int nextAddress;
        var int chunkSize;
        var int totalSize;
        var bool loop;
        let loop = true;
        //init to beginning of free list
        let address = freeList + 2;        
        let totalSize = size + 2;
        while(loop)
        {
            //set the next address that is stored at the begining of the free list
            let nextAddress = Memory.peek(address - 2);
            let chunkSize = Memory.peek(address -1 );
            //Come to the end of the free list then exit after checking to see if it is large enough
            if(nextAddress = 0)
            {
                let loop = false;
            }
            //find a segment of the right size
            if(chunkSize > size + 2)
            {
                //offsets the new address off the end of this available memory chunk
                let newAddress =  (address + chunkSize) - size;
                do Memory.poke(newAddress -2, newAddress);
                do Memory.poke(newAddress -1 , size);
                do Memory.poke(address -1 , chunkSize - totalSize);
                return newAddress;
            }else
            {
                let address = nextAddress;
            }
        
        
        }
        do Sys.err(0);
        return newAddress;      


    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

        var int address;
        var int nextAddress;
        var bool loop;
        let loop = true;
        let address = freeList;
        while(loop)
        {        
            let nextAddress = Memory.peek(address);    
            if(~(nextAddress = nextAddress + 2))
            {
                let loop = false;
                do Memory.poke(address, o[-2]);

            }else{
                let address = nextAddress;
            }
            
        }
        return;
    }    
}
