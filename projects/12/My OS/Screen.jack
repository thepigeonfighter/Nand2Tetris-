// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).8192
 */
class Screen {

    static Array screenRef;
    static Array twoToThe;
    static bool isBlack;
    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -16384;

        let screenRef = 16384;
        let isBlack = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int counter;
        while(counter < 8192)
        {
            let screenRef[counter] = 0;
            let counter = counter + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isBlack = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;
        let mask = x & 15;
        let mask = twoToThe[mask] ;        
        //finds the word to write 
        let address =  (y * 32) + (x /16);
        if(isBlack)
        {      
            let screenRef[address] = screenRef[address] | mask;
        }
        else{
            let mask  = ~mask;
            let screenRef[address] = screenRef[address] & mask;
        }

        
        
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a;
        var int b;
        var int diff;
        var int dx;
        var int dy;
        var bool movingUp;
        var bool movingRight;
        var bool horizontal;
        var bool vertical;
        let dy = y2 - y1;
        let dx = x2 - x1;
        let horizontal = (dy = 0);
        let vertical = (dx = 0);
        if(horizontal | vertical)
        {
            if(horizontal)
            {
                //moving left to right 
                if(dx> 0)
                {
                    while(dx >0)
                    {
                        do Screen.drawPixel(x1 + dx,y1);
                        let dx = dx - 1;
                    }
                }
                //moving right to left
                else{
                    while(dx < 0)
                    {
                        do Screen.drawPixel(x1 + dx,y2);
                        let dx = dx + 1;
                    }
                }
            }
            if(vertical)
            {
                //moving up from bottom to top
                if(dy> 0)
                {
                    while(dy > 0)
                    {
                        do Screen.drawPixel(x1,y1 + dy);
                        let dy = dy - 1;
                    }
                }
                //moving up from top to bottom
                else{
                    while(dy < 0)
                    {
                        do Screen.drawPixel(x1,y1 + dy);
                        let dy = dy + 1;
                    }
                }
            }
        }
        else{
        if(dx > 0)
        {
            let movingRight = true;
        }
        if(dy < 0)
        {
            let movingUp = true;
        }
        //move up and right 
        if(movingRight & movingUp)
        {
            while( (a <dx) & (b>dy))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0 )
                {
                     let b = b - 1;
                    let diff = diff + dx;
                }
                else{
                   
                    let a = a + 1; 
                    let diff = diff + dy;
                }
            }
        }
        // move down and right 
        if(movingRight & (~movingUp))
        {
           while( (a <dx) & (b<dy))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0 )
                {
                    let a = a + 1; 
                    let diff = diff + dy;
                }
                else{
                   
                    
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        //move down and left 
        if((~movingRight) & (~movingUp))
        {
           while( (a >dx) & (b<dy))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0 )
                {
                    let b = b + 1;
                    let diff = diff - dx;
                }
                else{
                   
                    let a = a - 1; 
                    let diff = diff - dy;
                    
                }
            }
        }
         //move up and left  
        if((~movingRight) & movingUp)
        {
           while((a >dx)& (b>dy))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0 )
                {
                    let b = b - 1;
                    let diff = diff - dx;
                }
                else{
                   
                    let a = a - 1; 
                    let diff = diff + dy;
                    
                }
            }
        }
        }
       
       return;
    }
    //draw a line from x1 to x2 at y height 
    function void drawHorizontalLine(int x1, int x2, int y)
    {
        if(isBlack)
        {
            do Screen.drawHorizontalBlackLine(x1,x2,y);
        }
        else{
            do Screen.drawHorizontalWhiteLine(x1,x2,y);
        }
        return;
    }
    function void drawHorizontalBlackLine(int x1, int x2, int y)
    {
        var int startingWord;
        var int lastWord;
        var int counter;       
        let startingWord =  (y * 32) + (x1 /16);
        let lastWord = (y * 32) + (x2 /16);
        let counter = x1 & 15; 
        if(counter = 0)
        {
            let screenRef[startingWord] = -1;
        }
        else{       
            while(counter < 16)
            {      
                //finds the word to write     
                let screenRef[startingWord] = screenRef[startingWord] | twoToThe[counter];
                let counter = counter + 1;       
            
            }
        }
        let counter = lastWord - startingWord;
        let startingWord = startingWord + 1;
        //fill the center words with black
        while(counter > 0)
        {
            let screenRef[startingWord] = -1;
            let startingWord = startingWord +1 ;
            let counter = counter - 1;
        }
        let counter = x2 & 15;
        //fills left over word with black 
        while(counter >0)
        {
            let screenRef[lastWord] = screenRef[lastWord] | twoToThe[counter];
            let counter = counter -1;
        }
        return;

    }
    function void drawHorizontalWhiteLine(int x1, int x2, int y)
    {
        var int startingWord;
        var int lastWord;
        var int counter;      
        let startingWord =  (y * 32) + (x1 /16);
        let lastWord = (y * 32) + (x2 /16);
        let counter = x1 & 15; 
        if(counter = 0)
        {
            let screenRef[startingWord] = -1;
        }
        else{       
            while(counter < 16)
            {      
                //finds the word to write     
                let screenRef[startingWord] = screenRef[startingWord] & ~twoToThe[counter];
                let counter = counter + 1;       
            
            }
        }
        let counter = lastWord - startingWord;
        let startingWord = startingWord + 1;
        //fill the center words with black
        while(counter > 0)
        {
            let screenRef[startingWord] = 0;
            let startingWord = startingWord +1 ;
            let counter = counter - 1;
        }
        let counter = x2 & 15;
        //fills left over word with black 
        while(counter >0)
        {
            let screenRef[lastWord] = screenRef[lastWord] &  ~(twoToThe[counter]);
            let counter = counter -1;
        }
        return;

    }
     
    
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
        let dy = y2 -y1;
        //moving from top to bottom
        if(dy > 0)
        {
            while(dy > 0)
            {
                do Screen.drawHorizontalLine(x1,x2,y1 + dy);
                let dy = dy - 1;
            }
        }
        else{
            while(dy < 0)
            {
                do Screen.drawHorizontalLine(x1,x2,y1 + dy);
                let dy = dy + 1;
            }
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int rsqrd;
        var int dysqrd;
        let r = Math.min(r,181);
        let dy = r;
        let rsqrd = r*r;
        let dysqrd = dy * dy;
        do Screen.drawLine(x-r +1 ,y,x+r-1 ,y);
        while(dy > 0 )
        {
            let dysqrd = dy *dy;
            do Screen.drawLine((x-Math.sqrt(rsqrd - dysqrd)), y + dy,(x+Math.sqrt(rsqrd - dysqrd)), y + dy);
            do Screen.drawLine((x-Math.sqrt(rsqrd - dysqrd)), y - dy,(x+Math.sqrt(rsqrd - dysqrd)), y - dy);
            let dy = dy - 1;
        }
        return;

    }
}
