//--------class Bat-----------
function Bat.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push argument 3
pop this 3
push constant 2
pop this 4
push pointer 0
call Bat.show 1
pop temp 0
push pointer 0
return
//----End Subroutine----
//----Compiling Void Method dispose----
function Bat.dispose 0
push argument 0
pop pointer 0 
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
//----End Subroutine----
//----Compiling Void Method show----
function Bat.show 0
push argument 0
pop pointer 0 
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
call Bat.draw 1
pop temp 0
push constant 0
return
//----End Subroutine----
//----Compiling Void Method hide----
function Bat.hide 0
push argument 0
pop pointer 0 
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Bat.draw 1
pop temp 0
push constant 0
return
//----End Subroutine----
//----Compiling Void Method draw----
function Bat.draw 0
push argument 0
pop pointer 0 
push this 0
push this 1
push this 0
push this 2
add
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
//----End Subroutine----
//----Compiling Void Method setDirection----
function Bat.setDirection 0
push argument 0
pop pointer 0 
push argument 1
pop this 4
push constant 0
return
//----End Subroutine----
//----Compiling Method getLeft which returns  a int to stack----
function Bat.getLeft 0
push argument 0
pop pointer 0 
push this 0
return
//----End Subroutine----
//----Compiling Method getRight which returns  a int to stack----
function Bat.getRight 0
push argument 0
pop pointer 0 
push this 0
push this 2
add
return
//----End Subroutine----
//----Compiling Void Method setWidth----
function Bat.setWidth 0
push argument 0
pop pointer 0 
push pointer 0
call Bat.hide 1
pop temp 0
push argument 1
pop this 2
push pointer 0
call Bat.show 1
pop temp 0
push constant 0
return
//----End Subroutine----
//----Compiling Void Method move----
function Bat.move 0
push argument 0
pop pointer 0 
push this 4
push constant 1
eq
if-goto Bat_move_1
goto Bat_move_2
label Bat_move_1
push this 0
push constant 4
sub
pop this 0
push this 0
push constant 0
lt
if-goto Bat_move_4
goto Bat_move_5
label Bat_move_4
push constant 0
pop this 0
goto Bat_move_6
label Bat_move_5
label Bat_move_6
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 2
add
push constant 1
add
push this 1
push this 0
push this 2
add
push constant 4
add
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push this 0
push constant 3
add
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0
goto Bat_move_3
label Bat_move_2
push this 0
push constant 4
add
pop this 0
push this 0
push this 2
add
push constant 511
gt
if-goto Bat_move_7
goto Bat_move_8
label Bat_move_7
push constant 511
push this 2
sub
pop this 0
goto Bat_move_9
label Bat_move_8
label Bat_move_9
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push constant 4
sub
push this 1
push this 0
push constant 1
sub
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 0
push this 2
add
push constant 3
sub
push this 1
push this 0
push this 2
add
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0
label Bat_move_3
push constant 0
return
//----End Subroutine----
//-------------End class Bat Compilation---------
