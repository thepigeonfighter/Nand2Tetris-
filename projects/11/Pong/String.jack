// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field Array string;
    field int stringLength;
    constructor String new(int maxLength) {
        if(maxLength >0)
        {
        let string = Array.new(maxLength);
        }
        let stringLength  = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(stringLength >0)
        {
        do string.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return stringLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let string[stringLength] = c;
        let stringLength = stringLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let string[stringLength] = 0;
        let stringLength = stringLength -1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int counter;
        var int charIntValue;
        var bool isNegative;
        if(string[counter] = 45)
        {
            let isNegative = true;
            let counter = 1;
        }
        while(counter< stringLength)
        {
            let charIntValue = string[counter];
            let value = (value * 10 ) + intValofChar(charIntValue);
            let counter = counter + 1;
        }
        if( isNegative)
        {
            return -value;
        }
        return value;
    }
    method int intValofChar(char c)
    {
        return c - 48;
    }
    method char charValueOfInt(int i)
    {
        return i + 48;
    }
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let stringLength = 0;
        if(val <0)
        {
            //adds a negative sign onto the front of string
            do appendChar(45);
        }
        let string = int2String(Math.abs(val));
        return;

    }
    method String int2String(int val)
    {
        var int lastDigit;     
        var char c;
        let lastDigit = val - (10 * (val/10));
        let c = charValueOfInt(lastDigit);
        if( val < 10)
        {            
            do appendChar(c);
            return string;
        }
        else{
            let string = int2String(val/10);
            do  appendChar(c);
            return string;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
